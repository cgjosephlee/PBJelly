
Train:
	use spotsToTrain.py to make the traning set (here rawOnEcoliTraining.txt)
	this makes you input, which you'll use to then call python easy.py. (here the model, range, scale, out, png)

test.py:
	This made results.txt - which holds the predicted label for every point in ecoli
	This also has normalize_whatever which I'm definitely going to need

See how well the other, corrected, data will work using this first machine

Install:
	Need to create a procedure and install libsvm into the pbsuite package
	I'll probably be editing some of the code so that it works more
	seamlessly with how I have my packaing (namely $SWEETPATH)

I'm thinking about averaging the data before spitting it out in spotsToTrain.py, this is what will be sent into my program anyway
I need to get normalize_whatever to work on numpy data
I need to get predict to work on numpy data

I'll be retraining everything again with the simulated data soon enough
Should I maybe make multiple model for different levels of coverage?
I know I should make different models for diffent questions (or maybe just the
single model that has multiple classifications)
I want to work and make sure that the kernal and traning method (rbv?) is the
optimal choice for the progam.

Need to make traning sets out of transposons (use what caleb has, but don't do
tri-allelic shit)

Once all of this is done, I should have a pretty easy time classifying svs.
I should probably spend time making some cython stuff and getting all of it
built as a package (for libsvm and pbsuite which will have cython)

Immediate ToDos:
	-- Make a procedure for installing libsvm and install it to the
	   environment
	-- Go through all of the code and refactor it so that it's easy to use
	   and understand (mainy test and test2.py [don't worry about making
	   it fast by having it work with numpy arrays until you just get it
	   working])
	-- Make libsvm work inside of Honey.py
	-- See how well new eval technique works on readsOnEcoli,
	   hgapReadsOnEcoli, readsOnPBJ, and human simulated variants
	-- Train on the human simulated variants
	-- Create titration experiments on the human simulated variants
	-- Start thinking about what kinds of graphs you'll be making to show
	   how effective Honey.py is for the tool.
	-- Try making an SVM that has multi-class specifications (ins, del,
	   mis, breakpoint)

BrainStorm! I need a gneric "breakPoint" classification. This will be for
events that are too large for the pacbio reads to span (mainly transposons and
huge indels)

Once i have that going, I will make the Annotation step
	
